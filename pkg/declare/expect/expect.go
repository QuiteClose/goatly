// Re-implementation of the internal/unless package generated by declare.py
// Each function calling t.Errorf with an ExpectError message if the
// condition is not met.
package expect

import (
	"github.com/quiteclose/goatly/internal/unless"
	"testing"
)

///////////////////////////////////////////////////////////////////////////////

// Equal will call t.Errorf unless a == b
func Equal(t *testing.T, a, b interface{}, message string) {
	unless.Equal(a, b, func(s string) {
		t.Errorf("ExpectError: %s (%s)", s, message)
	})
}

// False will call t.Errorf unless a == false
func False(t *testing.T, a bool, message string) {
	unless.False(a, func(s string) {
		t.Errorf("ExpectError: %s (%s)", s, message)
	})
}

// Nil will call t.Errorf unless a == nil
func Nil(t *testing.T, a interface{}, message string) {
	unless.Nil(a, func(s string) {
		t.Errorf("ExpectError: %s (%s)", s, message)
	})
}

// True will call t.Errorf unless a == true
func True(t *testing.T, a bool, message string) {
	unless.True(a, func(s string) {
		t.Errorf("ExpectError: %s (%s)", s, message)
	})
}

// NotEqual will call t.Errorf unless a != b
func NotEqual(t *testing.T, a, b interface{}, message string) {
	unless.NotEqual(a, b, func(s string) {
		t.Errorf("ExpectError: %s (%s)", s, message)
	})
}

// NotNil will call t.Errorf unless a != nil
func NotNil(t *testing.T, a interface{}, message string) {
	unless.NotNil(a, func(s string) {
		t.Errorf("ExpectError: %s (%s)", s, message)
	})
}
